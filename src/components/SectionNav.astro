<nav class="section-nav">
  <ul class="nav-bullets">
    <li>
      <div class="nav-label">Intro</div><button class="nav-bullet selected"
      ></button>
    </li>
    <li>
      <div class="nav-label">About</div><button class="nav-bullet"></button>
    </li>
    <li>
      <div class="nav-label">Projects</div><button class="nav-bullet"></button>
    </li>
    <li>
      <div class="nav-label">Contact</div><button class="nav-bullet"></button>
    </li>
  </ul>
</nav>

<style>
  .section-nav {
    position: fixed;
    right: 0;
    top: 40%;
    width: max-content;
    float: right;
  }

  .nav-bullets {
    list-style-type: none;
    list-style: none;
    margin: 0;
    padding: 10px;
    width: fit-content;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .nav-bullets li {
    width: fit-content;
    position: relative;
  }

  .nav-label {
    position: absolute;
    right: 50%;
    bottom: 0;
    display: flex;
    align-items: center;
    background-color: #61dafb;
    color: black;
    border: 1px solid black;
    border-radius: 1rem 0 0 1rem;
    height: 30px;
    box-sizing: border-box;
    vertical-align: middle;
    text-transform: uppercase;
    max-width: 0%;
    padding: 0;
    transition: all 1s;
    overflow: hidden;
  }

  .nav-label.hovered {
    max-width: 100px;
    right: 70%;
    padding: 0.2rem 1.5rem 0.2rem 0.5rem;
  }

  .nav-bullet {
    background-color: black;
    width: 30px;
    height: 30px;
    padding: 0;
    border: 1px solid black;
    transform: rotate(45deg);
    cursor: pointer;
    transition: transform 0.2s 100ms;
    transition-delay: 100ms;
    box-sizing: border-box;
  }

  .nav-bullet.dark {
    background-color: #61dafb;
    color: black;
  }

  .nav-bullet.selected {
    background-color: #61dafb;
    transform: rotate(90deg);
  }

  .hidden {
    display: none;
  }

  @media screen and (max-width: 700px) {
    .section-nav {
      display: none;
    }
  }
</style>

<script>
  const nav = document.querySelector(".section-nav");
  const sections = document.querySelectorAll("section");
  const buttons = document.querySelectorAll(".nav-bullet");
  const labels = document.querySelectorAll(".nav-label");
  const footer = document.querySelector("footer");

  const handleButtonClick = function (currentIndex: number) {
    sections[currentIndex].scrollIntoView({ behavior: "smooth" });
    handleButtonChange(currentIndex);
  };

  const handleButtonHover = function (currentIndex: number) {
    labels[currentIndex].classList.add("hovered");
    buttons[currentIndex].addEventListener("mouseleave", () => {
      labels[currentIndex].classList.remove("hovered");
    });

    buttons[currentIndex].addEventListener("focusout", () => {
      labels[currentIndex].classList.remove("hovered");
    });
  };

  const handleButtonChange = function (currentIndex: number) {
    buttons.forEach((button) => {
      if (button !== buttons[currentIndex]) {
        button.classList.remove("selected");
      }
    });
    buttons[currentIndex].classList.add("selected");

    labels.forEach((label) => {
      if (label !== labels[currentIndex]) {
        label.classList.remove("hovered");
      }
    });
  };

  for (let i = 0; i < buttons.length; i++) {
    buttons[i].addEventListener("click", () => {
      handleButtonClick(i);
    });

    buttons[i].addEventListener("mouseover", () => {
      handleButtonHover(i);
    });

    buttons[i].addEventListener("focus", () => {
      handleButtonHover(i);
    });
  }

  const timeouts: { [id: number]: number } = {};
  for (let i = 0; i < sections.length; i++) {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          timeouts[i] = setTimeout(() => handleButtonChange(i), 300);
        } else {
          clearTimeout(timeouts[i]);
        }
      },
      {
        threshold: 0.8,
      }
    );
    observer.observe(sections[i]);
  }

  let footerTimeout: number;
  const footerObserver = new IntersectionObserver(
    ([entry]) => {
      if (entry.isIntersecting) {
        footerTimeout = setTimeout(() => {
          nav?.classList.add("hidden");
        }, 300);
      } else {
        clearTimeout(footerTimeout);
        nav?.classList.remove("hidden");
      }
    },
    { threshold: 0.5 }
  );

  footer && footerObserver.observe(footer);
</script>
